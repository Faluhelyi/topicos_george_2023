library(readxl)
library(purrr)
library(dplyr)
library(ggplot2)
library(zoo)
library(forecast)
## Item 4
predicao = vector(length = 24)
predicao_e = vector(length = 24)
t_y = vector(length = 24)
for (i in c(24:1)) {
caminho_base <- "C:/Users/Igor/Desktop/topicos_george_2023/git_repo/lista5/BaseDados.xlsx"
## Obter os nomes das abas
abas <- excel_sheets(caminho_base)
## Ler as abas e armazenar em uma lista
dados_abas <- map(abas, ~read_excel(caminho_base, sheet = .x))
## Realizar o join com base no índice (primeira coluna)
dados_combinados <- reduce(dados_abas, left_join, by = '...1')
## data wrangling
dados_combinados <- data.frame(dados_combinados, row.names = dados_combinados$...1)
dados_combinados <- dados_combinados[, -1]
linhas_especificas <- row.names(filter(dados_combinados, abs(y1)>10))
# Substitua os valores por NA nas linhas especificadas
dados_combinados[linhas_especificas, ] <- replace(dados_combinados[linhas_especificas, ],
TRUE, NA)
# Substituir NA pelo valor observado no mês anterior
dados_combinados <- na.locf(dados_combinados, na.rm = FALSE)
# Selecionar todas as colunas da linha retirada (LOOCV)
true_y1 <- dados_combinados[120-i+1, 1]
true_colunas <- dados_combinados[120-i+1, -1]
# Selecionar todas as colunas com todas as linhas exceto a LINHA retirada (LOOCV)
dados_combinados <- dados_combinados[c(1:(120-i)),]
resp <- dados_combinados %>% select(y1)
colunas <- dados_combinados %>% select(-y1)
# Executar prcomp para todas as colunas selecionadas
resultado <- prcomp(colunas)
var_explained = resultado$sdev^2 / sum(resultado$sdev^2)
s = sum(cumsum(var_explained) <= 0.8)
covariaveis <- as.matrix(colunas) %*%
as.matrix(resultado$rotation[,c(1:s)]) # usando 80% retencao
covariaveis <- data.frame(covariaveis)
newdata = data.frame(cbind(resp, covariaveis))
modelo <- lm(y1 ~ ., data = newdata)
novo_caso <- as.matrix(true_colunas) %*% as.matrix(resultado$rotation[,c(1:s)])
#Fazer a predicao da linha retirada usando o modelo ajustado
predicao[i] <- predict(modelo, newdata = data.frame(novo_caso))
predicao_e[i] <- (predict(modelo, newdata = data.frame(novo_caso)) - true_y1)**2
t_y[i] <- c(t_y, true_y1)
}
RMSEP_1_4 <- sqrt(mean(predicao_e))
RMSEP_1_4
## Item 4
predicao = vector(length = 24)
predicao_e = vector(length = 24)
t_y = vector(length = 24)
for (i in c(24:1)) {
caminho_base <- "C:/Users/Igor/Desktop/topicos_george_2023/git_repo/lista5/BaseDados.xlsx"
## Obter os nomes das abas
abas <- excel_sheets(caminho_base)
## Ler as abas e armazenar em uma lista
dados_abas <- map(abas, ~read_excel(caminho_base, sheet = .x))
## Realizar o join com base no índice (primeira coluna)
dados_combinados <- reduce(dados_abas, left_join, by = '...1')
## data wrangling
dados_combinados <- data.frame(dados_combinados, row.names = dados_combinados$...1)
dados_combinados <- dados_combinados[, -1]
linhas_especificas <- row.names(filter(dados_combinados, abs(y1)>10))
# Substitua os valores por NA nas linhas especificadas
dados_combinados[linhas_especificas, ] <- replace(dados_combinados[linhas_especificas, ],
TRUE, NA)
# Substituir NA pelo valor observado no mês anterior
dados_combinados <- na.locf(dados_combinados, na.rm = FALSE)
# Selecionar todas as colunas da linha retirada (LOOCV)
true_y1 <- dados_combinados[120-i+1, 1]
true_colunas <- dados_combinados[120-i+1, -1]
# Selecionar todas as colunas com todas as linhas exceto a LINHA retirada (LOOCV)
dados_combinados <- dados_combinados[c(1:(120-i)),]
resp <- dados_combinados %>% select(y1)
colunas <- dados_combinados %>% select(-y1)
# Executar prcomp para todas as colunas selecionadas
resultado <- prcomp(colunas)
var_explained = resultado$sdev^2 / sum(resultado$sdev^2)
s = sum(cumsum(var_explained) <= 0.95)
covariaveis <- as.matrix(colunas) %*%
as.matrix(resultado$rotation[,c(1:s)]) # usando 80% retencao
covariaveis <- data.frame(covariaveis)
newdata = data.frame(cbind(resp, covariaveis))
modelo <- lm(y1 ~ ., data = newdata)
novo_caso <- as.matrix(true_colunas) %*% as.matrix(resultado$rotation[,c(1:s)])
#Fazer a predicao da linha retirada usando o modelo ajustado
predicao[i] <- predict(modelo, newdata = data.frame(novo_caso))
predicao_e[i] <- (predict(modelo, newdata = data.frame(novo_caso)) - true_y1)**2
t_y[i] <- c(t_y, true_y1)
}
RMSEP_1_4 <- sqrt(mean(predicao_e)) # 1.408749 com 0.8
# com 0.95
RMSEP_1_4
t_y
predicao
## Item 4
predicao = vector(length = 24)
predicao_e = vector(length = 24)
t_y = vector(length = 24)
for (i in c(24:1)) {
caminho_base <- "C:/Users/Igor/Desktop/topicos_george_2023/git_repo/lista5/BaseDados.xlsx"
## Obter os nomes das abas
abas <- excel_sheets(caminho_base)
## Ler as abas e armazenar em uma lista
dados_abas <- map(abas, ~read_excel(caminho_base, sheet = .x))
## Realizar o join com base no índice (primeira coluna)
dados_combinados <- reduce(dados_abas, left_join, by = '...1')
## data wrangling
dados_combinados <- data.frame(dados_combinados, row.names = dados_combinados$...1)
dados_combinados <- dados_combinados[, -1]
linhas_especificas <- row.names(filter(dados_combinados, abs(y1)>10))
# Substitua os valores por NA nas linhas especificadas
dados_combinados[linhas_especificas, ] <- replace(dados_combinados[linhas_especificas, ],
TRUE, NA)
# Substituir NA pelo valor observado no mês anterior
dados_combinados <- na.locf(dados_combinados, na.rm = FALSE)
# Selecionar todas as colunas da linha retirada (LOOCV)
true_y1 <- dados_combinados[120-i+1, 1]
true_colunas <- dados_combinados[120-i+1, -1]
# Selecionar todas as colunas com todas as linhas exceto a LINHA retirada (LOOCV)
dados_combinados <- dados_combinados[c(1:(120-i)),]
resp <- dados_combinados %>% select(y1)
colunas <- dados_combinados %>% select(-y1)
# Executar prcomp para todas as colunas selecionadas
resultado <- prcomp(colunas)
var_explained = resultado$sdev^2 / sum(resultado$sdev^2)
s = sum(cumsum(var_explained) <= 0.95)
covariaveis <- as.matrix(colunas) %*%
as.matrix(resultado$rotation[,c(1:s)]) # usando 80% retencao
covariaveis <- data.frame(covariaveis)
newdata = data.frame(cbind(resp, covariaveis))
modelo <- lm(y1 ~ ., data = newdata)
novo_caso <- as.matrix(true_colunas) %*% as.matrix(resultado$rotation[,c(1:s)])
#Fazer a predicao da linha retirada usando o modelo ajustado
predicao[i] <- predict(modelo, newdata = data.frame(novo_caso))
predicao_e[i] <- (predict(modelo, newdata = data.frame(novo_caso)) - true_y1)**2
t_y[i] <- true_y1
}
RMSEP_1_4 <- sqrt(mean(predicao_e)) # 1.331318 com 0.95 de retenção
RMSEP_1_4
t_y
as.matrix(t_y)
as.matrix(predicao)
as.matrix(t_y)
c(t_y)
as.data.frame(t_y)
as.data.frame(predicao)
sqrt(mean((as.matrix(predicao)- as.matrix(t_y))**2))
caminho_base <- "C:/Users/Igor/Desktop/topicos_george_2023/git_repo/lista5/BaseDados.xlsx"
## Obter os nomes das abas
abas <- excel_sheets(caminho_base)
## Ler as abas e armazenar em uma lista
dados_abas <- map(abas, ~read_excel(caminho_base, sheet = .x))
## Realizar o join com base no índice (primeira coluna)
dados_combinados <- reduce(dados_abas, left_join, by = '...1')
## data wrangling
dados_combinados <- data.frame(dados_combinados, row.names = dados_combinados$...1)
dados_combinados <- dados_combinados[, -1]
linhas_especificas <- row.names(filter(dados_combinados, abs(y1)>10))
# Substitua os valores por NA nas linhas especificadas
dados_combinados[linhas_especificas, ] <- replace(dados_combinados[linhas_especificas, ],
TRUE, NA)
# Substituir NA pelo valor observado no mês anterior
dados_combinados <- na.locf(dados_combinados, na.rm = FALSE)
Y <- dados_combinados %>% select(y1)
plsr = plsr(y1~., data = dados_combinados, ncomp = 29)
#install.packages('pls')
library(pls)
###############
### PARTE 3 ###
###############
#install.packages('caret')
library(caret)
caminho_base <- "C:/Users/Igor/Desktop/topicos_george_2023/git_repo/lista5/BaseDados.xlsx"
## Obter os nomes das abas
abas <- excel_sheets(caminho_base)
## Ler as abas e armazenar em uma lista
dados_abas <- map(abas, ~read_excel(caminho_base, sheet = .x))
## Realizar o join com base no índice (primeira coluna)
dados_combinados <- reduce(dados_abas, left_join, by = '...1')
## data wrangling
dados_combinados <- data.frame(dados_combinados, row.names = dados_combinados$...1)
dados_combinados <- dados_combinados[, -1]
linhas_especificas <- row.names(filter(dados_combinados, abs(y1)>10))
# Substitua os valores por NA nas linhas especificadas
dados_combinados[linhas_especificas, ] <- replace(dados_combinados[linhas_especificas, ],
TRUE, NA)
# Substituir NA pelo valor observado no mês anterior
dados_combinados <- na.locf(dados_combinados, na.rm = FALSE)
Y <- dados_combinados %>% select(y1)
plsr = plsr(y1~., data = dados_combinados, ncomp = 29)
dados_combinados
View(dados_combinados)
caminho_base <- "C:/Users/Igor/Desktop/topicos_george_2023/git_repo/lista5/BaseDados.xlsx"
## Obter os nomes das abas
abas <- excel_sheets(caminho_base)
## Ler as abas e armazenar em uma lista
dados_abas <- map(abas, ~read_excel(caminho_base, sheet = .x))
## Realizar o join com base no índice (primeira coluna)
dados_combinados <- reduce(dados_abas, left_join, by = '...1')
## data wrangling
dados_combinados <- data.frame(dados_combinados, row.names = dados_combinados$...1)
dados_combinados <- dados_combinados[, -1]
linhas_especificas <- row.names(filter(dados_combinados, abs(y1)>10))
# Substitua os valores por NA nas linhas especificadas
dados_combinados[linhas_especificas, ] <- replace(dados_combinados[linhas_especificas, ],
TRUE, NA)
# Substituir NA pelo valor observado no mês anterior
dados_combinados <- na.locf(dados_combinados, na.rm = FALSE)
dados_combinados <- dados_combinados[c(1:120-24),]
caminho_base <- "C:/Users/Igor/Desktop/topicos_george_2023/git_repo/lista5/BaseDados.xlsx"
## Obter os nomes das abas
abas <- excel_sheets(caminho_base)
## Ler as abas e armazenar em uma lista
dados_abas <- map(abas, ~read_excel(caminho_base, sheet = .x))
## Realizar o join com base no índice (primeira coluna)
dados_combinados <- reduce(dados_abas, left_join, by = '...1')
## data wrangling
dados_combinados <- data.frame(dados_combinados, row.names = dados_combinados$...1)
dados_combinados <- dados_combinados[, -1]
linhas_especificas <- row.names(filter(dados_combinados, abs(y1)>10))
# Substitua os valores por NA nas linhas especificadas
dados_combinados[linhas_especificas, ] <- replace(dados_combinados[linhas_especificas, ],
TRUE, NA)
# Substituir NA pelo valor observado no mês anterior
dados_combinados <- na.locf(dados_combinados, na.rm = FALSE)
dados_combinados <- dados_combinados[1:(119),]
newd = dados_combinados[120,-1]
plsr = plsr(y1~., data = dados_combinados, ncomp = 17)
predict(plsr, newdata = data.frame(newd))
caminho_base <- "C:/Users/Igor/Desktop/topicos_george_2023/git_repo/lista5/BaseDados.xlsx"
## Obter os nomes das abas
abas <- excel_sheets(caminho_base)
## Ler as abas e armazenar em uma lista
dados_abas <- map(abas, ~read_excel(caminho_base, sheet = .x))
## Realizar o join com base no índice (primeira coluna)
dados_combinados <- reduce(dados_abas, left_join, by = '...1')
## data wrangling
dados_combinados <- data.frame(dados_combinados, row.names = dados_combinados$...1)
dados_combinados <- dados_combinados[, -1]
linhas_especificas <- row.names(filter(dados_combinados, abs(y1)>10))
# Substitua os valores por NA nas linhas especificadas
dados_combinados[linhas_especificas, ] <- replace(dados_combinados[linhas_especificas, ],
TRUE, NA)
# Substituir NA pelo valor observado no mês anterior
dados_combinados <- na.locf(dados_combinados, na.rm = FALSE)
Y <- dados_combinados %>% select(y1)
plsr = plsr(y1~., data = dados_combinados, ncomp = 29)
result = crossval(plsr, segments = 120, segment.type = 'consecutive',
length.seg = 1)
Sys.time() - start
as.matrix(result$validation$pred[,,17]
)
as.matrix(result$validation$pred[,,17]
+ ).tail(1)
as.matrix(result$validation$pred[,,17])
tail(as.matrix(result$validation$pred[,,17]))
tail(as.matrix(result$validation$pred[,,17]), 1)
tail(as.matrix(result$validation$pred[,,17]), 1)[1]
predicao = vector(length = 24)
predicao_e = vector(length = 24)
t_y = vector(length = 24)
for (i in c(24:1)) {
caminho_base <- "C:/Users/Igor/Desktop/topicos_george_2023/git_repo/lista5/BaseDados.xlsx"
## Obter os nomes das abas
abas <- excel_sheets(caminho_base)
## Ler as abas e armazenar em uma lista
dados_abas <- map(abas, ~read_excel(caminho_base, sheet = .x))
## Realizar o join com base no índice (primeira coluna)
dados_combinados <- reduce(dados_abas, left_join, by = '...1')
## data wrangling
dados_combinados <- data.frame(dados_combinados, row.names = dados_combinados$...1)
dados_combinados <- dados_combinados[, -1]
linhas_especificas <- row.names(filter(dados_combinados, abs(y1)>10))
# Substitua os valores por NA nas linhas especificadas
dados_combinados[linhas_especificas, ] <- replace(dados_combinados[linhas_especificas, ],
TRUE, NA)
# Substituir NA pelo valor observado no mês anterior
dados_combinados <- na.locf(dados_combinados, na.rm = FALSE)
# Selecionar todas as colunas da linha retirada (LOOCV)
true_y1 <- dados_combinados[120-i+1, 1]
# Selecionar todas as colunas com todas as linhas exceto a LINHA retirada (LOOCV)
dados_combinados <- dados_combinados[c(1:(120-i+1)),]
plsr = plsr(y1~., data = dados_combinados, ncomp = 17)
result = crossval(plsr, segments = 120, segment.type = 'consecutive',
length.seg = 1)
predicao[i] <- tail(as.matrix(result$validation$pred[,,17]), 1)[1]
predicao_e[i] <- (predicao[i] -true_y1)**2
t_y[i] <- true_y1
}
RMSEP_3_4 <- sqrt(mean(predicao_e)) # 1.331318 com 0.95 de retenção
RMSEP_3_4
t_y
as.data.frame(t_y)
library("xlsx")
install.packages("xlsx")
setwd("C:/Users/Igor/Desktop/topicos_george_2023/git_repo/lista5")
# Add a existing iris  data set
write.xlsx(t_y, file = "tt.xlsx")
library("xlsx")
# Add a existing iris  data set
write.xlsx(t_y, file = "tt.xlsx")
# Add a existing iris  data set
write.xlsx(t_y, file = "tt.xlsx")
# Add a existing iris  data set
write.xlsx(as.data.frame(t_y), file = "tt.xlsx")
# Add a existing iris  data set
write.xlsx(as.data.frame(t_y), file = "C:/Users/Igor/Desktop/topicos_george_2023/git_repo/lista5/tt.xlsx")
# Add a existing iris  data set
write.xlsx(as.data.frame(t_y),sheetName="tt", file = "tt.xlsx")
library(openxlsx)
install.packages("openxlsx")
library(openxlsx)
# Add a existing iris  data set
write.xlsx(as.data.frame(t_y), file = "tt.xlsx")
# Add a existing iris  data set
write.xlsx(as.data.frame(predicao), file = "tt.xlsx")
# Add a existing iris  data set
write.xlsx(as.data.frame(predicao), file = "tt.xlsx")
RMSEP_3_4
## Item 4
predicao = vector(length = 24)
predicao_e = vector(length = 24)
t_y = vector(length = 24)
for (i in c(24:1)) {
caminho_base <- "C:/Users/Igor/Desktop/topicos_george_2023/git_repo/lista5/BaseDados.xlsx"
## Obter os nomes das abas
abas <- excel_sheets(caminho_base)
## Ler as abas e armazenar em uma lista
dados_abas <- map(abas, ~read_excel(caminho_base, sheet = .x))
## Realizar o join com base no índice (primeira coluna)
dados_combinados <- reduce(dados_abas, left_join, by = '...1')
## data wrangling
dados_combinados <- data.frame(dados_combinados, row.names = dados_combinados$...1)
dados_combinados <- dados_combinados[, -1]
linhas_especificas <- row.names(filter(dados_combinados, abs(y1)>10))
# Substitua os valores por NA nas linhas especificadas
dados_combinados[linhas_especificas, ] <- replace(dados_combinados[linhas_especificas, ],
TRUE, NA)
# Substituir NA pelo valor observado no mês anterior
dados_combinados <- na.locf(dados_combinados, na.rm = FALSE)
# Selecionar todas as colunas da linha retirada (LOOCV)
true_y1 <- dados_combinados[120-i+1, 1]
true_colunas <- dados_combinados[120-i+1, -1]
# Selecionar todas as colunas com todas as linhas exceto a LINHA retirada (LOOCV)
dados_combinados <- dados_combinados[c(1:(120-i)),]
resp <- dados_combinados %>% select(y1)
colunas <- dados_combinados %>% select(-y1)
# Executar prcomp para todas as colunas selecionadas
resultado <- prcomp(colunas)
var_explained = resultado$sdev^2 / sum(resultado$sdev^2)
s = sum(cumsum(var_explained) <= 0.95)
covariaveis <- as.matrix(colunas) %*%
as.matrix(resultado$rotation[,c(1:s)]) # usando 80% retencao
covariaveis <- data.frame(covariaveis)
newdata = data.frame(cbind(resp, covariaveis))
modelo <- lm(y1 ~ ., data = newdata)
novo_caso <- as.matrix(true_colunas) %*% as.matrix(resultado$rotation[,c(1:s)])
#Fazer a predicao da linha retirada usando o modelo ajustado
predicao[i] <- predict(modelo, newdata = data.frame(novo_caso))
predicao_e[i] <- (predict(modelo, newdata = data.frame(novo_caso)) - true_y1)**2
t_y[i] <- true_y1
}
RMSEP_1_4 <- sqrt(mean(predicao_e)) # 1.331318 com 0.95 de retenção
RMSEP_1_4
# Add a existing iris  data set
write.xlsx(as.data.frame(t_y), file = "tt.xlsx")
# Add a existing iris  data set
write.xlsx(as.data.frame(t_y), file = "tt.xlsx")
# Add a existing iris  data set
write.xlsx(as.data.frame(rev(t_y)), file = "tt.xlsx")
# Add a existing iris  data set
write.xlsx(as.data.frame(rev(predicao)), file = "tt.xlsx")
# Add a existing iris  data set
write.xlsx(as.data.frame(rev(t_y)), file = "tt.xlsx")
predicao = vector(length = 24)
predicao_e = vector(length = 24)
t_y = vector(length = 24)
for (i in c(24:1)) {
caminho_base <- "C:/Users/Igor/Desktop/topicos_george_2023/git_repo/lista5/BaseDados.xlsx"
## Obter os nomes das abas
abas <- excel_sheets(caminho_base)
## Ler as abas e armazenar em uma lista
dados_abas <- map(abas, ~read_excel(caminho_base, sheet = .x))
## Realizar o join com base no índice (primeira coluna)
dados_combinados <- reduce(dados_abas, left_join, by = '...1')
## data wrangling
dados_combinados <- data.frame(dados_combinados, row.names = dados_combinados$...1)
dados_combinados <- dados_combinados[, -1]
linhas_especificas <- row.names(filter(dados_combinados, abs(y1)>10))
# Substitua os valores por NA nas linhas especificadas
dados_combinados[linhas_especificas, ] <- replace(dados_combinados[linhas_especificas, ],
TRUE, NA)
# Substituir NA pelo valor observado no mês anterior
dados_combinados <- na.locf(dados_combinados, na.rm = FALSE)
# Selecionar todas as colunas da linha retirada (LOOCV)
true_y1 <- dados_combinados[120-i+1, 1]
# Selecionar todas as colunas com todas as linhas exceto a LINHA retirada (LOOCV)
dados_combinados <- dados_combinados[c(1:(120-i+1)),]
plsr = plsr(y1~., data = dados_combinados, ncomp = 17)
result = crossval(plsr, segments = 120, segment.type = 'consecutive',
length.seg = 1)
predicao[i] <- tail(as.matrix(result$validation$pred[,,17]), 1)[1]
predicao_e[i] <- (predicao[i] -true_y1)**2
t_y[i] <- true_y1
}
RMSEP_3_4 <- sqrt(mean(predicao_e)) # 1.261655 com 0.95 de retenção
RMSEP_3_4
as.data.frame(rev(t_y))
as.data.frame(rev(t_y))
# Add a existing iris  data set
write.xlsx(as.data.frame(rev(predicao)), file = "tt.xlsx")
sqrt(mean((as.matrix(predicao)-as.matrix(t_y))**2))
RMSEP_1_4
gc()
